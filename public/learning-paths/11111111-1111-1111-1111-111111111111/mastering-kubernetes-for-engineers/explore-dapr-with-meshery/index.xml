<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Explore Dapr with Meshery on Layer5 Academy</title><link>https://cloud.layer5.io/academy/learning-paths/11111111-1111-1111-1111-111111111111/mastering-kubernetes-for-engineers/explore-dapr-with-meshery/</link><description>Recent content in Explore Dapr with Meshery on Layer5 Academy</description><generator>Hugo</generator><language>en</language><atom:link href="https://cloud.layer5.io/academy/learning-paths/11111111-1111-1111-1111-111111111111/mastering-kubernetes-for-engineers/explore-dapr-with-meshery/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding How Dapr Works in a Kubernetes Cluster: A Visual Guide with Meshery</title><link>https://cloud.layer5.io/academy/learning-paths/11111111-1111-1111-1111-111111111111/mastering-kubernetes-for-engineers/explore-dapr-with-meshery/dapr/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cloud.layer5.io/academy/learning-paths/11111111-1111-1111-1111-111111111111/mastering-kubernetes-for-engineers/explore-dapr-with-meshery/dapr/introduction/</guid><description>&lt;h3 id="introduction" class="heading-link">
 &lt;strong>Introduction&lt;/strong>
 &lt;a href="#introduction" class="heading-anchor" aria-label="Permalink to this heading">ðŸ”—&lt;/a>
&lt;/h3>
&lt;p>In this tutorial, you will explore how &lt;a href="https://dapr.io/">Dapr&lt;/a>(Distributed Application Runtime) operates within a Kubernetes cluster.&lt;/p>
&lt;p>Using Meshery you will deploy the Dapr Helm chart along with sample applications: a Python application that generates messages and a Node.js application that consumes and stores those messages in a Redis state store, managed through Dapr&amp;rsquo;s state store component model.&lt;/p>
&lt;p>Meshery&amp;rsquo;s Kanvas visualization capabilities allow you to examine the components involved in this architecture and understand their relationships. This breakdown helps you see how Dapr interacts with the applications, enhancing your comprehension of its functionality.&lt;/p></description></item><item><title>Deploy Dapr Control Plane</title><link>https://cloud.layer5.io/academy/learning-paths/11111111-1111-1111-1111-111111111111/mastering-kubernetes-for-engineers/explore-dapr-with-meshery/dapr/deploy-dapr-control-plane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cloud.layer5.io/academy/learning-paths/11111111-1111-1111-1111-111111111111/mastering-kubernetes-for-engineers/explore-dapr-with-meshery/dapr/deploy-dapr-control-plane/</guid><description>&lt;p>The &lt;a href="https://docs.dapr.io/concepts/dapr-services/">Dapr control plane&lt;/a> is a set of services responsible for managing and orchestrating the runtime and configuration of Dapr. The control plane ensures the smooth operation, deployment, and management of Dapr sidecars and their interactions within a microservices architecture.&lt;/p>

&lt;h3 id="steps" class="heading-link">
 &lt;strong>Steps&lt;/strong>
 &lt;a href="#steps" class="heading-anchor" aria-label="Permalink to this heading">ðŸ”—&lt;/a>
&lt;/h3>

&lt;h3 id="import-dapr-helm-chart" class="heading-link">
 &lt;strong>Import Dapr Helm Chart&lt;/strong>
 &lt;a href="#import-dapr-helm-chart" class="heading-anchor" aria-label="Permalink to this heading">ðŸ”—&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>In the left sidebar, click the upward arrow symbol (import icon) to import the file into Meshery.&lt;/li>
&lt;li>In the modal that appears:
&lt;ul>
&lt;li>Enter a name for your design in the &lt;strong>Design File Name&lt;/strong> field (e.g. &lt;em>DAPR&lt;/em>).&lt;/li>
&lt;li>Select &lt;em>Helm Chart&lt;/em> from the &lt;strong>Design Type&lt;/strong> dropdown menu.&lt;/li>
&lt;li>Navigate to the &lt;a href="https://artifacthub.io/packages/helm/dapr/dapr/1.14.0-rc.4?modal=install">Dapr Helm Chart page&lt;/a> on Artifact Hub.&lt;/li>
&lt;li>Right-click &lt;strong>this_link&lt;/strong> at the bottom of the installation modal to copy the link address.&lt;/li>
&lt;li>Paste the copied link in the &lt;strong>URL&lt;/strong> field.&lt;/li>
&lt;li>Then, click &lt;strong>Import&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>






&lt;div class="md__image">
 &lt;img id="[370 133 20 455 323 38]" src="https://cloud.layer5.io/academy/11111111-1111-1111-1111-111111111111/mastering-kubernetes-for-engineers/dapr-helm.png" onclick="openModal(this.id)" alt="dapr-helm" 
 class="md-image-responsive" />
&lt;/div>&lt;/p></description></item><item><title>Deploy Redis</title><link>https://cloud.layer5.io/academy/learning-paths/11111111-1111-1111-1111-111111111111/mastering-kubernetes-for-engineers/explore-dapr-with-meshery/dapr/deploy-redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cloud.layer5.io/academy/learning-paths/11111111-1111-1111-1111-111111111111/mastering-kubernetes-for-engineers/explore-dapr-with-meshery/dapr/deploy-redis/</guid><description>&lt;h3 id="import-redis-helm-chart-and-deploy-to-cluster" class="heading-link">
 &lt;strong>Import Redis Helm Chart and Deploy to Cluster&lt;/strong>
 &lt;a href="#import-redis-helm-chart-and-deploy-to-cluster" class="heading-anchor" aria-label="Permalink to this heading">ðŸ”—&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>Follow the same steps used for the Dapr deployment to import this &lt;a href="https://charts.bitnami.com/bitnami/redis-19.6.2.tgz">Redis helm chart&lt;/a> into Meshery and deploy.&lt;/li>
&lt;/ol>











&lt;style>
.meshery-embed-container {
 border: 1px solid #eee;
 border-radius: 4px;
 margin: 1rem auto;
 box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}
.meshery-embed-container.full {
 width: 100%;
 height: 30rem;
}
.meshery-embed-container.half {
 width: 50%;
 height: 30rem;
}
.meshery-embed-container .cy-container {
 width: 100%;
 height: 100%;
}
&lt;/style>


&lt;div
 id="embedded-design-c3dcee44-6b8a-498f-a44c-66682ccf4d2a"
 class="meshery-embed-container full"
>&lt;/div>


&lt;script src="https://cloud.layer5.io/academy/images/learning-path/embed-test/embedded-design-redis.js" type="module">&lt;/script>

&lt;ol start="2">
&lt;li>Click &lt;strong>Actions&lt;/strong> to deploy, then click &lt;strong>Open In Visualizer&lt;/strong>.&lt;/li>
&lt;li>In &lt;strong>Visualizer&lt;/strong> mode, use the filter to adjust the views of the resources in the cluster.
&lt;ul>
&lt;li>For &lt;strong>View Selector&lt;/strong> select &lt;strong>Single Node&lt;/strong>.&lt;/li>
&lt;li>For &lt;strong>Kinds&lt;/strong> select the resources you want to see including &lt;em>Deployments, Pods, Services, Statefulset, Secret, Replicaset, Endpoints and Endpoint slices&lt;/em>.&lt;/li>
&lt;li>For &lt;strong>Namespaces&lt;/strong> select &lt;em>dapr_system&lt;/em> and &lt;em>default&lt;/em>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>These filter settings will allow you to view both Dapr resources within the &lt;em>dapr-system&lt;/em> namespace and Redis resources within the default namespace.&lt;/p></description></item><item><title>Deploy Dapr StateStore Component</title><link>https://cloud.layer5.io/academy/learning-paths/11111111-1111-1111-1111-111111111111/mastering-kubernetes-for-engineers/explore-dapr-with-meshery/dapr/deploy-dapr-statestore-component/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cloud.layer5.io/academy/learning-paths/11111111-1111-1111-1111-111111111111/mastering-kubernetes-for-engineers/explore-dapr-with-meshery/dapr/deploy-dapr-statestore-component/</guid><description>&lt;h3 id="create-configure-and-deploy-dapr-redis-state-store-component" class="heading-link">
 &lt;strong>Create, Configure and Deploy Dapr Redis State Store Component&lt;/strong>
 &lt;a href="#create-configure-and-deploy-dapr-redis-state-store-component" class="heading-anchor" aria-label="Permalink to this heading">ðŸ”—&lt;/a>
&lt;/h3>
&lt;p>Following the deployment of the Redis state store, we will use Meshery to create and configure the Dapr state store component. This involves specifying essential details, including the redisHost and redisPassword fields in the Dapr component configuration, which tell Dapr where to find the Redis server and how to authenticate.&lt;/p>
&lt;p>This setup ensures that Dapr connects to the correct Redis instance, allowing it to handle state management seamlessly without direct involvement from your application.&lt;/p></description></item><item><title>Deploy Python and NodeJS application</title><link>https://cloud.layer5.io/academy/learning-paths/11111111-1111-1111-1111-111111111111/mastering-kubernetes-for-engineers/explore-dapr-with-meshery/dapr/deploy-python-and-nodejs-application/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cloud.layer5.io/academy/learning-paths/11111111-1111-1111-1111-111111111111/mastering-kubernetes-for-engineers/explore-dapr-with-meshery/dapr/deploy-python-and-nodejs-application/</guid><description>&lt;h3 id="deploy-nodejs-application" class="heading-link">
 &lt;strong>Deploy Node.js Application&lt;/strong>
 &lt;a href="#deploy-nodejs-application" class="heading-anchor" aria-label="Permalink to this heading">ðŸ”—&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>Clone &lt;a href="https://github.com/dapr/quickstarts.git">this&lt;/a> repo and cd into &lt;strong>quickstarts/tutorials/hello-kubernetes/deploy&lt;/strong> directory to get the Node.js and Python YAML files.&lt;/li>
&lt;li>Import the Node.js application into Meshery.&lt;/li>
&lt;/ol>











&lt;style>
.meshery-embed-container {
 border: 1px solid #eee;
 border-radius: 4px;
 margin: 1rem auto;
 box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}
.meshery-embed-container.full {
 width: 100%;
 height: 30rem;
}
.meshery-embed-container.half {
 width: 50%;
 height: 30rem;
}
.meshery-embed-container .cy-container {
 width: 100%;
 height: 100%;
}
&lt;/style>


&lt;div
 id="embedded-design-13665e6e-53cc-4cf4-9e8e-280237428672"
 class="meshery-embed-container full"
>&lt;/div>


&lt;script src="https://cloud.layer5.io/academy/images/learning-path/embed-test/embedded-design-node-application.js" type="module">&lt;/script>

&lt;p>The Dapr annotations in the manifest file will let the Dapr sidecar injector know that it is supposed to inject a sidecar container into this pod during creation.&lt;/p></description></item><item><title>View Application Logs</title><link>https://cloud.layer5.io/academy/learning-paths/11111111-1111-1111-1111-111111111111/mastering-kubernetes-for-engineers/explore-dapr-with-meshery/dapr/view-application-logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cloud.layer5.io/academy/learning-paths/11111111-1111-1111-1111-111111111111/mastering-kubernetes-for-engineers/explore-dapr-with-meshery/dapr/view-application-logs/</guid><description>&lt;p>In this chapter, we will explore how Dapr utilizes its &lt;a href="https://docs.dapr.io/concepts/building-blocks-concept/">API constructs&lt;/a> to facilitate communication and manage the state of application data within this architecture by observing the container logs.&lt;/p>

&lt;h3 id="python-application-logs" class="heading-link">
 &lt;strong>Python Application Logs&lt;/strong>
 &lt;a href="#python-application-logs" class="heading-anchor" aria-label="Permalink to this heading">ðŸ”—&lt;/a>
&lt;/h3>
&lt;p>The Python application code above generates messages that contain data with an &lt;strong>orderId&lt;/strong> that increments once per second.&lt;/p>
&lt;p>Here&amp;rsquo;s a snippet from the Python script in &lt;strong>app.js&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">dapr_port&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getenv&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;DAPR_HTTP_PORT&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3500&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">dapr_url&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;http://localhost:&lt;/span>&lt;span style="color:#4e9a06">{}&lt;/span>&lt;span style="color:#4e9a06">/neworder&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dapr_port&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">n&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">while&lt;/span> &lt;span style="color:#204a87;font-weight:bold">True&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">n&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;data&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;orderId&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">n&lt;/span>&lt;span style="color:#000;font-weight:bold">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">try&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">response&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">requests&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">post&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dapr_url&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">json&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">message&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">except&lt;/span> &lt;span style="color:#c00;font-weight:bold">Exception&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sleep&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Dapr sidecar for the Python application sends a POST request to the Dapr sidecar of the Node.js application using the &lt;strong>Dapr service invocation API&lt;/strong>. Here&amp;rsquo;s a breakdown of what happens:&lt;/p></description></item><item><title>Conclusion</title><link>https://cloud.layer5.io/academy/learning-paths/11111111-1111-1111-1111-111111111111/mastering-kubernetes-for-engineers/explore-dapr-with-meshery/dapr/conclusion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cloud.layer5.io/academy/learning-paths/11111111-1111-1111-1111-111111111111/mastering-kubernetes-for-engineers/explore-dapr-with-meshery/dapr/conclusion/</guid><description>&lt;p>Congratulations! You have reached the end of this course on understanding how Dapr works in a Kubernetes cluster, using Meshery as a visual guide. Throughout this course, you learned how to import Dapr, Redis, and application configuration files into Meshery and visualize the resources and their relationships.&lt;/p>
&lt;p>You successfully created and configured a Dapr state store component using Meshery. You deployed the designs and visualized the deployed resources in the cluster using Operator mode. Additionally, you viewed the Dapr sidecars and observed the resources deployed in the &lt;code>dapr-system&lt;/code> and &lt;code>default&lt;/code> namespaces.&lt;/p></description></item></channel></rss>